// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Country {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(100)
  states State[]
}

model State {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  countryId Int
  Country   Country @relation(fields: [countryId], references: [id], onDelete: NoAction)
  cities    City[]

  @@index([countryId])
}

model City {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(100)
  stateId  Int
  State    State     @relation(fields: [stateId], references: [id], onDelete: NoAction)
  projects Project[]

  @@index([stateId])
}

model ProjectType {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(100) // e.g., "Apartment", "House"
  projects Project[]
}

model Project {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(255)
  description   String?  @db.Text
  cityId        Int
  projectTypeId Int
  createdAt     DateTime @default(now()) @db.Timestamp(0)

  City         City          @relation(fields: [cityId], references: [id], onDelete: NoAction)
  ProjectType  ProjectType   @relation(fields: [projectTypeId], references: [id], onDelete: NoAction)
  UnitVariants UnitVariant[]

  @@index([cityId])
  @@index([projectTypeId])
}

model UnitVariant {
  id        Int     @id @default(autoincrement())
  projectId Int
  area      Float // square meters
  bedrooms  Int
  bathrooms Int
  parking   Int
  priceFrom Float
  available Boolean @default(true)

  Project Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Views   ClientView[]

  @@index([projectId])
}

model Client {
  id       Int     @id @default(autoincrement())
  fullName String  @db.VarChar(255)
  email    String  @db.VarChar(255)
  phone    String? @db.VarChar(50)

  views ClientView[]
}

model ClientView {
  id            Int      @id @default(autoincrement())
  clientId      Int
  unitVariantId Int
  viewedAt      DateTime @default(now()) @db.Timestamp(0)

  Client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  UnitVariant UnitVariant @relation(fields: [unitVariantId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([unitVariantId])
}
